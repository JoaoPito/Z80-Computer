;Versao 2.01 30/10/2017

#define charBuffer $7F ;Tamanho do buffer de comandos(128 caracteres)
#define buffer $8000+charBuffer+$1 ;Cursor/Buffer 1
#define comBuffer1 buffer+$2 ;Buffer 2(16 bits)
#define comBuffer2 comBuffer1+$2 ;Buffer 3(16 bits)
#define comBuffer3 comBuffer2+$2 ;Buffer 4(16 bits)
    
    ;//////MONITOR///////
    
    LD HL,MONITORINIT
    CALL DisplayString
    
InitMonitor:
    LD HL,$8000 ;Inicializa o cursor(19 caracteres)
    LD A,$00
    LD (buffer),HL
ClearBufLoop:;Limpa o buffer de comando
    LD (HL),$30
    INC A
    INC HL
    CP charBuffer+1
    JP NZ,ClearBufLoop
;Coloca o marcador de linha no display(>)
    LD A,'>'
    CALL DisplayChar
 
;Monitor loop
MonitorLoop:
	CALL GetKey;Espera por input
    
	;Verifica se o ENTER foi pressionado
	CP $0D ;Compara o reg A com 0Dh(Carriage Return)
	JP Z,MonExecCom ;Se for igual, executa o comando
	;Verifica se o BACKSPACE foi pressionado
	CP $7F ;Compara o reg A com 7Fh(DELETE)
	JP Z,MonBckspcCom ;Se for igual, executa o comando para apagar
    
	;Se nenhuma condicao acima for aceita, coloca o caractere no buffer
MonBufferChar:
	LD HL,(buffer);Carrega o cursor do buffer em HL
	LD (HL),A;Carrega o caractere no buffer
	INC HL
	LD (buffer),HL;Carrega HL no cursor
	CALL DisplayChar;Coloca o caractere no display
	LD DE,buffer
	SBC HL,DE;Verifica se o limite de caracteres foi ultrapassado
	JP Z,MonExecCom;Se sim, executa o comando
	;Senao, volta a procurar caracteres
	JP MonitorLoop;Fecha o loop
 
MonExecCom:
    LD HL,$8000 ;Carrega HL com o end. do comeco do buffer
    LD B,charBuffer ;Carrega B com o numero de caracteres do buffer(128)
    
MonExecComLoop:
    ;Verifica se o comando DUMP foi executado
	LD A,'D' ;Carrega A com 'D' ASCII	
    CP (HL)
    JP Z,MonDump
    LD A,$64 ;Carrega A com 'd' ASCII	
    CP (HL)
    JP Z,MonDump
    
    ;Verifica se o comando WRITE foi executado
	LD A,'W' ;Carrega A com 'W' ASCII
    CP (HL)
    JP Z,MonWrite
    LD A,$77 ;Carrega A com 'w' ASCII
    CP (HL)
    JP Z,MonWrite
    
    ;Verifica se o comando RUN foi executado
	LD A,'R' ;Carrega A com 'R' ASCII
    CP (HL)
    JP Z,MonRun
    LD A,$72 ;Carrega A com 'r' ASCII
    CP (HL)
    JP Z,MonRun
    
    ;Verifica se o comando OUT foi executado
	LD A,'O' ;Carrega A com 'O' ASCII
    CP (HL)
    JP Z,MonOut
    LD A,$6F ;Carrega A com 'o' ASCII
    CP (HL)
    JP Z,MonOut
    
    ;Verifica se o comando IN foi executado
	LD A,'I' ;Carrega A com 'I' ASCII
    CP (HL)
    JP Z,MonIn
    LD A,$69 ;Carrega A com 'i' ASCII
    CP (HL)
    JP Z,MonIn
    
    ;Verifica se o comando COPY foi executado
	LD A,'C' ;Carrega A com 'C' ASCII
    CP (HL)
    JP Z,MonCopy
    LD A,$63 ;Carrega A com 'C' ASCII
    CP (HL)
    JP Z,MonCopy
    
    ;Verifica se o comando BOOT foi executado
	LD A,'B' ;Carrega A com 'B' ASCII
    CP (HL)
    JP Z,MonBoot
    
    INC HL;Incrementa HL
    DEC B;Decrementa B 
    LD A,$00
    CP B;Verifica se HL nao passou do buffer
    JP NZ,MonExecComLoop;Senao, repete o loop
    
    JP Z,MonNotFound
 
;DUMP COMMAND
MonDump:
	INC HL
    LD A,$20 ;Verifica se existe um espaço($20) depois da letra d
    CP (HL)
    JP nz,MonNotFound;Senão, limpa o buffer e volta para o monitor
    
    INC HL;Pega o primeiro endereço escrito no buffer e converte em binario(Primeiro byte)
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD B,A    
    INC HL;Segundo byte
    LD D,(HL)
    INC HL
    LD E,(HL)
    LD (buffer),HL
    CALL ASCIIToBin
    LD H,B
    LD L,A
    LD (comBuffer1),HL
    
    LD HL,(buffer)
    INC HL
    LD A,$20 ;Verifica se existe um espaço($20) depois do primeiro endereço
    CP (HL)
    JP nz,MonDump1Add;Senão, exibe o primeiro endereço
    
    INC HL;Pega o segundo numero escrito no buffer e converte em binario(Primeiro byte)
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD (comBuffer2),A;Armazena o numero de bytes no buffer 2
    
    LD HL,(comBuffer1);Carrega o endereço inicial em HL    
    
MonDumpAdd:	
    ;Mostra o endereço no display
    
    LD A,$00;Zera o contador de colunas
    LD (comBuffer3),A
    
    LD A,$0D;Pula uma linha
    CALL DisplayChar
    
    LD A,'$'
    CALL DisplayChar
    
    LD A,H;Primeiro byte
    CALL BinToASCII
    LD A,D
    CALL DisplayChar
    LD A,E
    CALL DisplayChar
    
    LD A,L;Segundo byte
    CALL BinToASCII
    LD A,D
    CALL DisplayChar
    LD A,E
    CALL DisplayChar
    
    LD A,':'
    CALL DisplayChar    
    
MonDumpData:
    ;Mostra os dados do endereço no display
    LD A,' '
    CALL DisplayChar
    
    LD A,(HL)
    CALL BinToASCII
    LD A,D
    CALL DisplayChar
    LD A,E
    CALL DisplayChar
    LD A,(comBuffer2);Verifica quantos bytes foram exibidos
    CP $00
    JP z,MonDumpDataFinish;Se for igual a 0, termina o loop
    INC HL
    DEC A
    LD (comBuffer2),A
    
    LD DE,comBuffer3;Verifica o contador de colunas
    EX DE,HL
    LD B,(HL)
    LD A,$0F
    INC (HL)
    EX DE,HL     
    CP B
    JP Z,MonDumpAdd;Se =8 salta para a função para exibir o endereço    
    
    JP MonDumpData
    
MonDumpDataFinish:
    LD A,$0D
    CALL DisplayChar    
	JP InitMonitor
    
MonDump1Add:;Funcao para exibir somente 1 endereço
    LD HL,(comBuffer1);Carrega o endereço inicial em HL
    LD A,$00
    LD (comBuffer2),A
    JP MonDumpAdd
    
    
;WRITE COMMAND
MonWrite:
	INC HL
	LD A,$20 ;Verifica se existe um espaço($20) depois da letra d
    CP (HL)
    JP nz,MonNotFound;Senão, limpa o buffer e volta para o monitor    
    
    INC HL;Pega o endereço escrito no buffer e converte em binario(Primeiro byte)
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD B,A    
    INC HL;Segundo byte
    LD D,(HL)
    INC HL
    LD (buffer),HL
    LD E,(HL)
    CALL ASCIIToBin    
    LD H,B
    LD L,A
    LD (comBuffer1),HL
    
    LD HL,(buffer) 
    INC HL
    LD A,$20 ;Verifica se existe um espaço($20) depois do endereço
    CP (HL)
    JP nz,MonNotFound;Senão, limpa o buffer e volta para o monitor
    
MonWriteData:

    INC HL
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    
    LD DE,(comBuffer1)
    LD (DE),A;Escreve o valor no endereço    
    INC DE;Incrementa o endereço
    LD (comBuffer1),DE
    
    INC HL
    LD A,$20 ;Verifica se existe um espaço($20) depois do endereço
    CP (HL)
    JP z,MonWriteData
    JP MonWriteFinish;Senão, termina o comando
    
MonWriteFinish:    
    LD A,$0D
    CALL DisplayChar
    LD A,'O'
    CALL DisplayChar
    LD A,'K'
    CALL DisplayChar
    LD A,$0D
    CALL DisplayChar
    
	JP InitMonitor
    
;RUN COMMAND
MonRun:
	INC HL
 	LD A,$20 ;Verifica se existe um espaço($20) depois da letra R
    CP (HL)
    JP nz,MonNotFound;Senão, limpa o buffer e volta para o monitor
    
    INC HL;Pega o endereço escrito no buffer e converte em binario(Primeiro byte)
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD B,A    
    INC HL;Segundo byte
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD H,B
    LD L,A
    
    JP (HL)
    
;OUTPUT COMMAND
MonOut:
	INC HL
	LD A,$20 ;Verifica se existe um espaço($20) depois da letra o
    CP (HL)
    JP nz,MonNotFound;Senão, limpa o buffer e volta para o monitor    
    
    INC HL;Pega o endereço escrito no buffer e converte em binario(Primeiro byte)
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD (comBuffer1),A
    
    INC HL
    LD A,$20 ;Verifica se existe um espaço($20) depois do endereço
    CP (HL)
    JP nz,MonNotFound;Senão, limpa o buffer e volta para o monitor
    
MonOutData:
    INC HL
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD (buffer),HL
    
    LD HL,comBuffer1
    LD C,(HL)
    OUT (C),A;Escreve o valor na porta I/O    
    INC C;Incrementa o endereço
    LD (HL),C
    
    LD HL,(buffer)
    INC HL
    LD A,$20 ;Verifica se existe um espaço($20) depois do endereço
    CP (HL)
    JP z,MonWriteData
    JP MonWriteFinish;Senão, termina o comando
    
MonOutFinish:    
    LD A,$0D
    CALL DisplayChar
    LD A,'O'
    CALL DisplayChar
    LD A,'K'
    CALL DisplayChar
    LD A,$0D
    CALL DisplayChar
    
	JP InitMonitor
    
;INPUT COMMAND
MonIn:
	INC HL
	LD A,$20 ;Verifica se existe um espaço($20) depois da letra o
    CP (HL)
    JP nz,MonNotFound;Senão, limpa o buffer e volta para o monitor    
    
    INC HL;Pega o endereço escrito no buffer e converte em binario(Unico byte)
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD (comBuffer1),A
    
    INC HL
    LD A,$20 ;Verifica se existe um espaço($20) depois do endereço
    CP (HL)
    JP nz,MonNotFound;Senão, limpa o buffer e volta para o monitor
    
    INC HL;Pega o endereço escrito no buffer e converte em binario(Primeiro byte)
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD B,A    
    INC HL;Segundo byte
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD H,B
    LD L,A
    
    PUSH HL
    LD HL,MONINPUT
    CALL DisplayString    
    
    LD HL,comBuffer1
    LD D,(HL)     
    POP HL
    
    LD C,$40
    CALL RS232InString
    
    LD HL,OK
    CALL DisplayString
    
	JP InitMonitor
    
;COPY COMMAND
MonCopy:

	INC HL
	LD A,$20 ;Verifica se existe um espaço($20) depois da letra d
    CP (HL)
    JP nz,MonNotFound;Senão, limpa o buffer e volta para o monitor    
    
    INC HL;Pega o endereço escrito no buffer e converte em binario(Primeiro byte)
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD B,A    
    INC HL;Segundo byte
    LD D,(HL)
    INC HL
    LD (buffer),HL
    LD E,(HL)
    CALL ASCIIToBin    
    LD H,B
    LD L,A
    LD (comBuffer1),HL
    
    LD HL,(buffer) 
    INC HL
	LD A,$20 ;Verifica se existe um espaço($20) depois da letra d
    CP (HL)
    JP nz,MonNotFound;Senão, limpa o buffer e volta para o monitor    
    
    INC HL;Pega o endereço escrito no buffer e converte em binario(Primeiro byte)
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD B,A    
    INC HL;Segundo byte
    LD D,(HL)
    INC HL
    LD (buffer),HL
    LD E,(HL)
    CALL ASCIIToBin    
    LD H,B
    LD L,A
    LD (comBuffer2),HL
    
    LD HL,(buffer) 
    INC HL
	LD A,$20 ;Verifica se existe um espaço($20) depois da letra d
    CP (HL)
    JP nz,MonNotFound;Senão, limpa o buffer e volta para o monitor    
    
    INC HL;Pega o endereço escrito no buffer e converte em binario(Primeiro byte)
    LD D,(HL)
    INC HL
    LD E,(HL)
    CALL ASCIIToBin
    LD B,A    
    INC HL;Segundo byte
    LD D,(HL)
    INC HL
    LD (buffer),HL
    LD E,(HL)
    CALL ASCIIToBin    
    LD H,B
    LD L,A
    LD (comBuffer3),HL
    
	;Byte Counter Load
    LD HL,(comBuffer2)
    LD DE,(comBuffer1)
    SBC HL,DE
    LD (comBuffer3+$2),HL
    LD BC,(comBuffer3+$2)
    
    ;Copy bytes
    LD DE,(comBuffer3)
    LD HL,(comBuffer1)
    LDIR
    
    LD A,$0D
    CALL DisplayChar
    LD Hl,OK
    CALL DisplayString
	
	JP InitMonitor
    
;BOOT COMMAND
MonBoot:
    ;Verifica se esta escrito (B)OOT
	LD A,$4F ;Carrega A com 'O' ASCII
	INC HL
    CP (HL)
	JP NZ,MonNotFound;Senao, salta para MonNotFound
    
    ;Verifica se esta escrito (B)OOT
	LD A,$4F ;Carrega A com 'O' ASCII
	INC HL
    CP (HL)
	JP NZ,MonNotFound;Senao, salta para MonNotFound
    
    ;Verifica se esta escrito (B)OOT
	LD A,$54 ;Carrega A com 'T' ASCII
	INC HL
    CP (HL)
	JP NZ,MonNotFound;Senao, salta para MonNotFound
    
    LD A,$0D
    CALL DisplayChar
    
	JP $0000;Reinicia a maquina
    
;CLEAR COMMAND
MonClear:
    
	JP InitMonitor
    
;Backspace
MonBckspcCom:
	LD HL,(buffer);Carrega HL com a posição do buffer
    LD A,$00;Verifica se nao esta no inicio do monitor
    CP L
    JP Z,MonitorLoop;Se sim, volta para o prompt
    
    LD (HL),$30;Escreve 0(ASCII) na posição
    DEC HL;Decrementa HL
    LD (buffer),HL;Escreve HL na posição do buffer atual
   	LD A,'<'
    CALL DisplayChar
	JP MonitorLoop;Volta para o prompt
    
;Mensagem comando nao encontrado
MonNotFound:
	LD A,$0D
    CALL DisplayChar
	LD HL,MONNF
    CALL DisplayString
	JP InitMonitor    

;Monitor Strings
MONITORINIT:
	.DB "Monitor V2.01",$0D,$FF    
MONINPUT:
	.DB $0D,"Recebendo dados por RS232 - 62500bps",$0D,$FF
MONNF:
	.DB $0D,"Comando nao encontrado.",$0D,$FF

HelloWorld:
	.DB "Hello World!",$0D,$FF

    
    
    
    
    
    
    
    
    
